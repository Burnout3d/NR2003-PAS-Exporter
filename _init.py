bl_info = {
    "name": "NR2003 PAS Exporter",
    "author": "Burnout3D",
    "version": ( 1, 0, 0 ),
    "blender": ( 3, 2, 0 ),
    "location": "File > Export > NR2003 PAS Export(.PAS)",
    "description": "NR2003 PAS Export(.PAS)",
    "warning": "",
    "wiki_url": "",
    "tracker_url": "",
    "category": "Import-Export"
}

import os
import bpy
import math
import time
from bpy_extras import node_shader_utils

# SETTINGS
aseFloat = lambda x: '''{0: 0.4f}'''.format( x )
optionScale = 16.0
optionSubmaterials = False
optionSmoothingGroups = True
optionAllowMultiMats = True

# PAS COMPONENTS
aseHeader = ''
aseScene = ''
aseMaterials = ''
aseGeometry = ''

# Other
matList = []
numMats = 0
currentMatId = 0
list_objects = []

# ERROR
class Error( Exception ):

    def __init__( self, message ):
        self.message = message
        print( '\n\n' + message + '\n\n' )

#------------------------------------------------------------------------------------------------------------------------------------------------
#
#    HEADER
#
#------------------------------------------------------------------------------------------------------------------------------------------------
class cHeader:
    def __init__( self ):
        
        self.comment1 = "#############################################\n#\n# DO NOT EDIT THIS FILE!!!!!\n#\n# This Papyrus Ascii Scene file was genrated\n# by exporting as a PAS file from Blender.\n#\n# "
        self.filename = bpy.data.filepath
        self.comment2 = "\n#\n# Blender version by Burnout3D\n#\n#############################################\nVERSION\t200\n"

    def __repr__( self ):
        return '''{0}{1}{2}'''.format( self.comment1, self.filename, self.comment2 )
    
#================================================================================================================================================
#
#    GEOMETRY
#
#================================================================================================================================================

#------------------------------------------------------------------------
#    CLASS GEOMETRY GEOMOBJECT
#------------------------------------------------------------------------
class cGeomObject:
    def __init__( self, object ):
        print( object.name + ": Constructing Geometry" )
        global optionAllowMultiMats
        global currentMatId

        self.name = object.name

        if optionAllowMultiMats:
            self.material_ref = 0
        else:
            self.material_ref = currentMatId

        self.nodetm = geoXFORM( object )
        self.mesh = geoMESH( object )

        self.dump = '''\nSHAPE {{\n\tNAME "{0}"\n{1}\n{2}\n}}'''.format( self.name, self.nodetm, self.mesh )
        
    def __repr__( self ):
        return self.dump
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY NODETM
#------------------------------------------------------------------------
class geoXFORM:
    def __init__( self, object ):
        self.tm_row0 = '1.0000\t0.0000\t0.0000'
        self.tm_row1 = '0.0000\t1.0000\t0.0000'
        self.tm_row2 = '0.0000\t0.0000\t1.0000'
        self.tm_row3 = '0.0000\t0.0000\t0.0000'
        self.tm_pos = '0.0000\t0.0000\t0.0000'


        self.dump = '''\tTRANSFORM {{\
                       \n\t\tXFORM_ROW0\t{0}\
                       \n\t\tXFORM_ROW1\t{1}\
                       \n\t\tXFORM_ROW2\t{2}\
                       \n\t\tXFORM_ROW3\t{3}\
                       \n\t\tXFORM_POS\t{4}\
                       \n\t}}'''.format( self.tm_row0, self.tm_row1, self.tm_row2, self.tm_row3, self.tm_pos )

    def __repr__( self ):
        return self.dump

#------------------------------------------------------------------------
#    CLASS GEOMETRY MESH
#------------------------------------------------------------------------
class geoMESH:
    def __init__( self, object ):
        bpy.ops.mesh.reveal

        if collisionObject( object ) == False:
            object.data.uv_layers.active_index = 0
            object.data.uv_layer_stencil_index = 0
            self.tvertlist = cTVertlist( object )
            self.numtvertex = self.tvertlist.length
            self.numtvfaces = int(len( object.data.uv_layer_stencil.data ) / 3)
            self.tfacelist = cTFacelist( self.numtvfaces )
            self.uvmapchannels = self.uvdump( object )

            # OUTPUT
            self.tvertlist_str = '\n\t\t#VERTEX_LIST# ' + str( self.tvertlist )
            self.numtvertex_str = '\n\t\t#NUM_VERTICES# ' + str( self.numtvertex )
            self.numtvfaces_str = '\n\t\tNUM_FACES ' + str( self.numtvfaces )
            self.tfacelist_str = '\n\t\tFACE_LIST ' + str( self.tfacelist )

        else:
            self.tvertlist_str = ''
            self.numtvertex_str = ''
            self.numtvfaces_str = ''
            self.tfacelist_str = ''
            self.uvmapchannels = ''

        self.timevalue = '0'
        self.numvertex = len( object.data.vertices )
        self.numfaces = len( object.data.polygons )
        self.vertlist = geoVERT_LIST( object )
        self.facelist = geoFACE_LIST( object )

        # Vertex Paint
        if len( object.data.vertex_colors ) > 0:
            self.cvertlist = cCVertlist( object )
            self.numcvertex = self.cvertlist.length
            self.numcvfaces = len( object.data.vertex_colors.data.polygons )
            self.cfacelist = cCFacelist( self.numcvfaces )
            # change them into strings now
            self.cvertlist = '\n{0}'.format( self.cvertlist )
            self.numcvertex = '\n\t\t*MESH_NUMCVERTEX {0}'.format( self.numcvertex )
            self.numcvfaces = '\n\t\t*MESH_NUMCVFACES {0}'.format( self.numcvfaces )
            self.cfacelist = '\n{0}'.format( self.cfacelist )
        else:
            self.cvertlist = ''
            self.numcvertex = ''
            self.numcvfaces = ''
            self.cfacelist = ''

        self.normals = cNormallist( object )

    # get uv layer names for specified object
    def getUVLayerNames( self, object ):
        self.uvLayerNames = []
        obj = object.data
        for uv in obj.uv_layers.keys():
            self.uvLayerNames.append( str( uv ) )

    def uvdump( self, object ):
        self.mappingchannels = ''
        # if there is more than 1 uv layer
        if collisionObject( object ) == False:
            self.getUVLayerNames( object )
            # if len( self.uvLayerNames ) > 1:
            # save uv actives
            active_uv = object.data.uv_layers.active_index
            obj = object.data
            activeUV = 0
            for uvname in self.uvLayerNames:
                if activeUV == 0:
                    activeUV += 1
                    continue
                obj.uv_layers.active_index = activeUV
                obj.uv_layer_stencil_index = activeUV
                self.uvm_tvertlist = cTVertlist( object )
                self.uvm_numtvertex = self.uvm_tvertlist.length
                self.uvm_numtvfaces = len( object.data.uv_layer_stencil.data ) / 3
                self.uvm_tfacelist = cTFacelist( self.uvm_numtvfaces )

                # if len(object.data.vertex_colors) > 0:
                    # self.uvm_cvertlist = cCVertlist(object)
                    # self.uvm_numcvertex = self.uvm_cvertlist.length
                    # self.uvm_numcvfaces = len(object.data.vertex_colors[0].data)
                    # self.uvm_cfacelist = cCFacelist(self.uvm_numcvfaces)

                    # self.uvm_cvertlist = '\n{0}'.format(self.uvm_cvertlist)
                    # self.uvm_numcvertex = '\n\t\t*MESH_NUMCVERTEX {0}'.format(self.uvm_numcvertex)
                    # self.uvm_numcvfaces = '\n\t\t*MESH_NUMCVFACES {0}'.format(self.uvm_numcvfaces)
                    # self.uvm_cfacelist = '\n{0}'.format(self.uvm_cfacelist)
                # else:
                self.uvm_numcvertex = ''
                self.uvm_numcvfaces = ''
                self.uvm_cvertlist = ''
                self.uvm_cfacelist = ''

                # print extra mapping channels
                self.mappingchannels += '''\n\t\t*MESH_MAPPINGCHANNEL {0} {{\n\t\t\tNUM_VERT {1}\n\t\t\tVERTLIST {2}\n\t\tNUM_FACES {3}\n\t\tFACE_LIST {4}{5}{6}{7}{8}\n\t\t}}'''.format( str( activeUV + 1 ), self.uvm_numtvertex, self.uvm_tvertlist, self.uvm_numtvfaces, self.uvm_tfacelist, self.uvm_numcvertex, self.uvm_cvertlist, self.uvm_numcvfaces, self.uvm_cfacelist )
                activeUV = activeUV + 1

            # restore uv actives
            object.data.uv_layers.active_index = active_uv

        return self.mappingchannels

    # UV textures go AFTER MESH_FACE_LIST
    # MESH_NUMTVERTEX, MESH_TVERTLIST, MESH_NUMTVFACES, MESH_TFACELIST         
    def __repr__( self ):
        temp = '''\tMESH {{\n\t\tNUM_VERTICES {1}\n\t\tVERTEX_LIST {3}{7}{8}\n{14}\n\t'''.format( self.timevalue, self.numvertex, self.numfaces, self.vertlist, self.facelist, self.numtvertex_str, self.tvertlist_str, self.numtvfaces_str, self.tfacelist_str, self.numcvertex, self.cvertlist, self.numcvfaces, self.cfacelist, self.uvmapchannels, self.normals )
        #\n\t\t*TIMEVALUE {0}  \n\t\t*MESH_NUMFACES {2}  \n\t\t*MESH_FACE_LIST {4}  {5}{6}  {7}{8} {9}{10}{11}{12}{13}
        
        return temp
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY VERTLIST
#------------------------------------------------------------------------
class geoVERT_LIST:
    def __init__( self, object ):
        self.vertlist = []
        for data in object.data.vertices:
            temp = geoVERT( data.index, data.co.to_tuple( 4 ) )
            self.vertlist.append( temp )

    def dump( self ):
        temp = ''
        for x in self.vertlist:
            temp += str( x )
        return temp

    def __repr__( self ):
        return '''{{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY VERT
#------------------------------------------------------------------------
class geoVERT:
    def __init__( self, index, coord ):
        global optionScale

        self.index = index
        self.x = aseFloat( coord[0] * optionScale )
        self.y = aseFloat( coord[1] * optionScale )
        self.z = aseFloat( coord[2] * optionScale )

    def __repr__( self ):
        return '''\t\t\tVERTEX {0}:\t {1}\t {2}\t {3}\n'''.format( self.index, self.x, self.y, self.z )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY FACELIST
#------------------------------------------------------------------------
class geoFACE_LIST:
    def __init__( self, object ):
        global optionAllowMultiMats
        global matList
        global numMats
        global currentMatId
        global list_objects
        import bpy


        self.facelist = []
        sgID = 0


        # Define smoothing groups (if enabled)
        if ( collisionObject( object ) == False ):
            if ( optionSmoothingGroups ):
                self.smoothing_groups = defineSmoothing( self, object )
            else:
                self.smoothing_groups = ''


        for face in object.data.polygons:
            if optionAllowMultiMats:
                if (collisionObject(object) == False):
                    if object.type == 'MESH' and ('UCX_') not in object.name:
                            if len(object.data.materials) == 0:
                                removeDuplimeshes(list_objects)
                                raise Error('A material is missing in at least one of view layer meshes')
                    self.matid = matList.index( object.material_slots[face.material_index].material.name )
                else:
                    self.matid = 0
            else:
                self.matid = currentMatId

            if ( collisionObject( object ) == False ):
                if ( optionSmoothingGroups ):
                    for group in self.smoothing_groups:
                        if group.count( face.index ) == 0:
                            continue
                        else:
                            #TODO: Compress sg's
                            index = self.smoothing_groups.index( group )
                            sgID = index % 32

            temp = '''\t\t\t*MESH_FACE {0}: A: {1} B: {2} C: {3} AB: 0 BC: 0 CA: 0 *MESH_SMOOTHING {4} *MESH_MTLID {5}\n'''.format( face.index, face.vertices[0], face.vertices[1], face.vertices[2], sgID, self.matid )
            self.facelist.append( temp )

        if currentMatId < numMats - 1:
            currentMatId += 1
        else:
            currentMatId = 0

    def dump( self ):
        temp = ''
        for x in self.facelist:
            temp = temp + str( x )
        return temp

    def __repr__( self ):
        return '''{{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY TVERTLIST
#------------------------------------------------------------------------
class cTVertlist:
    def __init__( self, object):
        self.vertlist = []

        # update tessface
        mesh = bpy.context.object.data
        mesh.update()
        mesh.calc_loop_triangles()

        for index, face in enumerate( object.data.loop_triangles ):
            if len( object.data.uv_layers ) == 0:
                removeDuplimeshes (list_objects)
                raise Error( "No UV texture map assigned to Mesh ") #+ object.name )
            else:
                temp = cTVert( ( index * 3 ) + 0, object.data.uv_layers[object.data.uv_layers.active_index].data[face.index * 3 + 0].uv )
                self.vertlist.append( temp )
                temp = cTVert( ( index * 3 ) + 1, object.data.uv_layers[object.data.uv_layers.active_index].data[face.index * 3 + 1].uv )
                self.vertlist.append( temp )
                temp = cTVert( ( index * 3 ) + 2, object.data.uv_layers[object.data.uv_layers.active_index].data[face.index * 3 + 2].uv )
                self.vertlist.append( temp )

        self.length = len( self.vertlist )

    def dump( self ):
        temp = ''
        for x in self.vertlist:
            temp += str( x )
        return temp

    def __repr__( self ):
        return '''{{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY TVERT
#------------------------------------------------------------------------
class cTVert:
    def __init__( self, index, coord ):
        self.index = index
        self.u = aseFloat( coord[0] )
        self.v = aseFloat( coord[1] )

    def __repr__( self ):
        return '''\t\t\t*-*VERTEX*-* {0}:\t{1}\t{2}\t0.0000\n'''.format( self.index, self.u, self.v )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY TFACELIST
#------------------------------------------------------------------------
class cTFacelist:
    def __init__( self, facecount ):
        self.facelist = []
        if type(facecount) == float:
            removeDuplimeshes(list_objects)
            raise Error(' Each mesh must have only one UVmap')

        for data in range(facecount):
            temp = cTFace( data )
            self.facelist.append( temp )

    def dump( self ):
        temp = ''
        for x in self.facelist:
            temp = temp + str( x )
        return temp

    def __repr__( self ):
        return '''{{\n{0}\t\t}}'''.format( self.dump() )

#------------------------------------------------------------------------
#    CLASS GEOMETRY TFACE
#------------------------------------------------------------------------
class cTFace:
    def __init__( self, x ):
        self.index = x
        self.vertices = []
        self.vertices.append( x * 3 )
        self.vertices.append( ( x * 3 ) + 1 )
        self.vertices.append( ( x * 3 ) + 2 )

    def __repr__( self ):
        return '''\t\t\tFACE {0}:\t{1}\t{2}\t{3}\n'''.format( self.index, self.vertices[0], self.vertices[1], self.vertices[2] )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY CVERTLIST
#------------------------------------------------------------------------
class cCVertlist:
    def __init__( self, object ):
        self.vertlist = []
        self.index = 0

        # Blender 2.63+
        bpy.ops.object.mode_set( mode = 'OBJECT' )
        object.data.calc_loop_triangles()

        for face in object.data.loop_triangles:
            temp = object.data.vertex_colors[0].data[face.index * 3 + 0].color
            self.vertlist.append( cCVert( self.index, temp ) )
            temp = object.data.vertex_colors[0].data[face.index * 3 + 1].color
            self.vertlist.append( cCVert( self.index + 1, temp ) )
            temp = object.data.vertex_colors[0].data[face.index * 3 + 2].color
            self.vertlist.append( cCVert( self.index + 2, temp ) )
            self.index += 3

        self.length = len( self.vertlist )

    def dump( self ):
        temp = ''
        for x in self.vertlist:
            temp = temp + str( x )
        return temp

    def __repr__( self ):
        return '''\t\t*MESH_CVERTLIST {{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY CVERT
#------------------------------------------------------------------------
class cCVert:
    def __init__( self, index, temp ):
        self.index = index
        self.r = aseFloat( float( temp[0] ) )
        self.g = aseFloat( float( temp[1] ) )
        self.b = aseFloat( float( temp[2] ) )

    def __repr__( self ):
        return '''\t\t\t*MESH_VERTCOL {0} {1} {2} {3}\n'''.format( self.index, self.r, self.g, self.b )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY CFACELIST
#------------------------------------------------------------------------
class cCFacelist:
    def __init__( self, facecount ):
        temp = [0 for x in range( facecount )]
        self.facelist = []
        for index, data in enumerate( temp ):
            self.facelist.append( cCFace( index, data ) )

    def dump( self ):
        temp = ''
        for x in self.facelist:
            temp = temp + str( x )
        return temp

    def __repr__( self ):
        return '''\t\t*MESH_CFACELIST {{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY CFACE
#------------------------------------------------------------------------
class cCFace:
    def __init__( self, index, data ):
        self.index = index
        self.vertices = []
        self.vertices.append( index * 3 )
        self.vertices.append( ( index * 3 ) + 1 )
        self.vertices.append( ( index * 3 ) + 2 )

    def __repr__( self ):
        return '''\t\t\t*MESH_CFACE {0} {1} {2} {3}\n'''.format( self.index, self.vertices[0], self.vertices[1], self.vertices[2] )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY NORMALLIST
#------------------------------------------------------------------------
class cNormallist:
    def __init__( self, object ):
        self.normallist = []
        for face in object.data.polygons:
            self.normallist.append( cNormal( face, object ) )

    def dump( self ):
        temp = ''
        for x in self.normallist:
            temp = temp + str( x )
        return temp

    def __repr__( self ):
        return '''\t\tNORMAL_LIST {{\n{0}\t\t}}'''.format( self.dump() )
    
#------------------------------------------------------------------------
#    CLASS GEOMETRY NORMAL
#------------------------------------------------------------------------
class cNormal:
    def __init__( self, face, object ):
        self.faceindex = face.index
        self.facenormal = [aseFloat( x ) for x in face.normal.to_tuple( 4 )]
        self.vertnormals = []
        for x in face.vertices:
            self.vertnormals.append( [x, [aseFloat( y ) for y in object.data.vertices[x].normal.to_tuple( 4 )]] )

    def __repr__( self ):
        return '''\t\t\tFACE_NORMAL {0}:\t{1}\t{2}\t{3}\n\t\t\t\tVERTEX_NORMAL {4}\t{5}\t{6}\t{7}\n\t\t\t\tVERTEX_NORMAL {8}\t{9}\t{10}\t{11}\n\t\t\t\tVERTEX_NORMAL {12}\t{13}\t{14}\t{15}\n'''.format( self.faceindex, self.facenormal[0], self.facenormal[1], self.facenormal[2], self.vertnormals[0][0], self.vertnormals[0][1][0], self.vertnormals[0][1][1], self.vertnormals[0][1][2], self.vertnormals[1][0], self.vertnormals[1][1][0], self.vertnormals[1][1][1], self.vertnormals[1][1][2], self.vertnormals[2][0], self.vertnormals[2][1][0], self.vertnormals[2][1][1], self.vertnormals[2][1][2] )

#================================================================================================================================================
#
#    MATERIALS
#
#================================================================================================================================================
class cMaterials:
    def __init__( self ):
        global optionSubmaterials
        global matList
        global numMats

        import bpy
        import mathutils

        self.material_list = []

        # Get all of the materials used by non-collision visible object meshes  
        for object in bpy.context.visible_objects:

            if collisionObject( object ) == True:
                continue
            elif object.type != 'MESH':
                continue
            else:
                print( object.name + ': Constructing Materials' )
                for slot in object.material_slots:
                    # if the material is not in the material_list, add it
                    if self.material_list.count( slot.material ) == 0:
                        self.material_list.append( slot.material )
                        mat_wrap = node_shader_utils.PrincipledBSDFWrapper(slot.material) if slot.material else None
                        # image = mat_wrap.base_color_texture.image
                        matList.append( slot.material.name )

                    bpy.context.view_layer.objects.active = object
                    object.select_set(state=True)

        self.material_count = len( self.material_list )
        numMats = self.material_count

        # Raise an error if there are no materials found
        if self.material_count == 0:
            raise Error( 'Mesh must have at least one applied material' )
        else:
            if ( optionSubmaterials ):
                self.dump = cSubMaterials( self.material_list )
            else:
                self.dump = cMultiMaterials( self.material_list )

    def __repr__( self ):
        return str( self.dump )
    
#------------------------------------------------------------------------
#    CLASS MATERIALS MULTI-MATERIALS
#------------------------------------------------------------------------
class cMultiMaterials:
    def __init__( self, material_list ):
        self.numMtls = len( material_list )
        # Initialize material information
        self.dump = '''\n\tNUM_MATERIAL_REFS {0}\
                    \n\tMATERIAL_REF {{\
                    '''.format( str( self.numMtls ) )

        for index, slot in enumerate( material_list ):
            self.dump += '''\n\t\tMATERIAL {{\
                            {1}\
                            \n\t}}'''.format( index, cMaterial( slot ) )

        self.dump += '\n}'

    def __repr__( self ):
        return self.dump
    
#------------------------------------------------------------------------
#    CLASS MATERIALS SUB-MATERIALS
#------------------------------------------------------------------------
class cSubMaterials:
    def __init__( self, material_list ):
        from mathutils import Color
        import bpy
        slot = material_list[0]

        # Get BSDF inputs
        material = bpy.data.materials[slot.name]
        nodes = material.node_tree.nodes
        principled = next(n for n in nodes if n.type == 'BSDF_PRINCIPLED')
        inputVal = principled.inputs['Specular']
        base_color = principled.inputs['Base Color']  # Or principled.inputs[0]
        value = base_color.default_value
        color = Color((value[0], value[1], value[2]))
        valRough = principled.inputs['Roughness']  # Or principled.inputs[0]

        # Initialize material information
        self.dump = '''*MATERIAL_LIST {\
                    \n\t*MATERIAL_COUNT 1\
                    \n\t*MATERIAL 0 {\
                    '''
        self.matDump = ''
        self.name = material_list[0].name
        self.numSubMtls = len( material_list )
        self.diffusemap = cDiffusemap( slot ) # /*slot.texture_slots[0]*/
        if ( self.numSubMtls > 1 ):
            self.matClass = 'Multi/Sub-Object'
            self.diffuseDump = ''
        else:
            self.matClass = 'Standard'
            self.numSubMtls = 0
            self.diffuseDump = self.diffdump()
        self.ambient = ''.join( [aseFloat( x ) for x in [0.0, 0.0, 0.0]] )
        self.diffuse = ''.join([aseFloat(x) for x in color])
        self.specular = ''.join([aseFloat(x) for x in [inputVal.default_value, inputVal.default_value, inputVal.default_value]])
        self.shine = aseFloat(valRough.default_value)  # slot.specular_hardness / 511
        self.shinestrength = aseFloat( 0 )
        self.transparency = aseFloat( 0 )
        self.wiresize = aseFloat( 1.0 )
        self.shading = 'WHO CARES'
        self.xpfalloff = aseFloat( 0.0 )
        self.xptype = 'Filter'
        self.falloff = 'In'
        self.soften = False
        self.submtls = []
        self.selfillum = aseFloat( 0 )

        if ( len( material_list ) > 1 ):
            # Build SubMaterials
            for index, slot in enumerate( material_list ):
                self.matDump += '''\n\t\t*SUBMATERIAL {0} {{\
                                {1}\
                                \n\t\t}}'''.format( index, cMaterial( slot ) )

        self.dump += '''\n\t\t*MATERIAL_NAME"{0}"\
                       \n\t\t*MATERIAL_AMBIENT {2}\
                       \n\t\t*MATERIAL_DIFFUSE {3}\
                       \n\t\t*MATERIAL_SPECULAR {4}\
                       \n\t\t*MATERIAL_SHINE {5}\
                       \n\t\t*MATERIAL_SHINESTRENGTH {6}\
                       \n\t\t*MATERIAL_TRANSPARENCY {7}\
                       \n\t\t*MATERIAL_WIRESIZE {8}\
                       \n\t\t*MATERIAL_SHADING {9}\
                       \n\t\t*MATERIAL_XP_FALLOFF {10}\
                       \n\t\t*MATERIAL_SELFILLUM {11}\
                       \n\t\t*MATERIAL_FALLOFF {12}\
                       \n\t\t*MATERIAL_XP_TYPE {13}\
                       {14}\
                       \n\t\t*NUMSUBMTLS {15}\
                       {16}'''.format( self.name, self.matClass, self.ambient, self.diffuse, self.specular, self.shine, self.shinestrength, self.transparency, self.wiresize, self.shading, self.xpfalloff, self.selfillum, self.falloff, self.xptype, self.diffuseDump, self.numSubMtls, self.matDump )


        self.dump += '\t\n}\n}'

    def diffdump( self ):
        for x in [self.diffusemap]:
            return x
    
    def specdump( self ):
        for x in [self.specularmap]:
            return x
        
    def __repr__( self ):
        return self.dump
    
#------------------------------------------------------------------------
#    CLASS MATERIALS MATERIAL
#------------------------------------------------------------------------    
class cMaterial:
    def __init__( self, slot ):
        import bpy
        from mathutils import Color
        self.dump = ''
        obj = bpy.context.object
        material = bpy.data.materials[slot.name]
        nodes = material.node_tree.nodes
        principled = next(n for n in nodes if n.type == 'BSDF_PRINCIPLED')
        inputVal= principled.inputs['Specular'] # or .inputs[5]
        base_color = principled.inputs['Base Color']  # Or principled.inputs[0] get base color
        value = base_color.default_value
        color = Color((value[0], value[1], value[2]))
        valRough = principled.inputs['Roughness']  # Or principled.inputs[7]


        self.name = slot.name
        self.matClass = 'Standard'
        self.ambient = ''.join( [aseFloat( x ) for x in [0.0, 0.0, 0.0]] )
        self.diffuse = ''.join( [aseFloat( x ) for x in color] )
        self.specular = ''.join( [aseFloat( x ) for x in [inputVal.default_value, inputVal.default_value, inputVal.default_value ]] )
        self.shine = aseFloat( valRough.default_value )  # slot.specular_hardness / 511
        self.shinestrength = aseFloat( 0.0 )  # slot.specular_intensity
        self.transparency = aseFloat( 1.0 ) #aseFloat( 0.0 )  # slot.translucency * slot.alpha
        self.wiresize = aseFloat( 1.0 )

        # Material Definition
        self.shading = 'WHO CARES'  # str( slot.specular_shader ).capitalize()
        self.xpfalloff = aseFloat( 0.0 )
        self.xptype = 'Filter'
        self.falloff = 'In'
        self.soften = False
        self.diffusemap = cDiffusemap( slot )  # slot.texture_slots[0]
        self.specularmap = cSpecularmap( slot )  # slot.texture_slots[0]
        self.submtls = []
        self.selfillum = aseFloat( 0.0 )
        self.dump = '''\n\t\tNAME "{0}"\
                       \n\t\tMATERIAL_AMBIENT {2}\
                       \n\t\tMATERIAL_DIFFUSE {3}\
                       \n\t\tMATERIAL_SPECULAR {4}\
                       \n\t\t*MATERIAL_SHININESS {5}\
                       \n\t\t*MATERIAL_SHINESTRENGTH {6}\
                       \n\t\t*MATERIAL_TRANSPARENCY {7}\
                       \n\t\t*MATERIAL_WIRESIZE {8}\
                       \n\t\t*MATERIAL_SHADING {9}\
                       \n\t\t*MATERIAL_XP_FALLOFF {10}\
                       \n\t\t*MATERIAL_SELFILLUM {11}\
                       \n\t\t*MATERIAL_FALLOFF {12}\
                       \n\t\t*MATERIAL_XP_TYPE {13}\
                       {14}\
                       '''.format( self.name, self.matClass, self.ambient, self.diffuse, self.specular, self.shine, self.shinestrength, self.transparency, self.wiresize, self.shading, self.xpfalloff, self.selfillum, self.falloff, self.xptype, self.diffdump(), self.specdump() )

    def diffdump( self ):
        for x in [self.diffusemap]:
            return x
        
    def specdump( self ):
        for x in [self.specularmap]:
            return x

    def __repr__( self ):
        return self.dump
#------------------------------------------------------------------------
#    CLASS MATERIALS DIFFUSEMAP
#------------------------------------------------------------------------
class cDiffusemap:
    def __init__( self, slot ):
        import os
        import bpy
        self.dump = ''

        if slot is None:
           self.name = 'default'
           self.mapclass = 'Bitmap'
           self.bitmap = 'None'
        else:
        # RS mod - Get texture images from slot nodes
           material = bpy.data.materials[slot.name]
           nodes = material.node_tree.nodes
           principled = next(n for n in nodes if n.type == 'BSDF_PRINCIPLED')
           base_color = principled.inputs['Base Color']
           if base_color.is_linked:
               link = base_color.links[0]
           else:
               removeDuplimeshes(list_objects)
               raise TypeError('Mesh must have a Material an image texture assigned')

           link_node = link.from_node

           if link_node.image is None:
               removeDuplimeshes(list_objects)
               raise TypeError(' Get one image texture from a file and assign it')

           self.name = link_node.image.name
           self.mapclass = 'Bitmap'
           self.bitmap = os.path.realpath(bpy.path.abspath(link_node.image.filepath))

        self.subno = 1
        self.amount = aseFloat(1.0)
        self.type = 'Screen'
        self.uoffset = aseFloat(0.0)
        self.voffset = aseFloat(0.0)
        self.utiling = aseFloat(1.0)
        self.vtiling = aseFloat(1.0)
        self.angle = aseFloat(0.0)
        self.blur = aseFloat(1.0)
        self.bluroffset = aseFloat(0.0)
        self.noiseamt = aseFloat(1.0)
        self.noisesize = aseFloat(1.0)
        self.noiselevel = 1
        self.noisephase = aseFloat(0.0)
        self.bitmapfilter = 'Pyramidal'

        self.dump = '''\n\t\t*MAP_DIFFUSE {{\
                       \n\t\t\t*MAP_NAME "{0}"\
                       \n\t\t\t*MAP_CLASS "{1}"\
                       \n\t\t\t*MAP_SUBNO {2}\
                       \n\t\t\t*MAP_AMOUNT {3}\
                       \n\t\t\t*BITMAP "{4}"\
                       \n\t\t\t*MAP_TYPE {5}\
                       \n\t\t\t*UVW_U_OFFSET {6}\
                       \n\t\t\t*UVW_V_OFFSET {7}\
                       \n\t\t\t*UVW_U_TILING {8}\
                       \n\t\t\t*UVW_V_TILING {9}\
                       \n\t\t\t*UVW_ANGLE {10}\
                       \n\t\t\t*UVW_BLUR {11}\
                       \n\t\t\t*UVW_BLUR_OFFSET {12}\
                       \n\t\t\t*UVW_NOUSE_AMT {13}\
                       \n\t\t\t*UVW_NOISE_SIZE {14}\
                       \n\t\t\t*UVW_NOISE_LEVEL {15}\
                       \n\t\t\t*UVW_NOISE_PHASE {16}\
                       \n\t\t\t*BITMAP_FILTER {17}\
                       \n\t\t}}\
                       '''.format(self.name, self.mapclass, self.subno, self.amount, self.bitmap, self.type, self.uoffset, self.voffset, self.utiling, self.vtiling, self.angle, self.blur, self.bluroffset, self.noiseamt, self.noisesize, self.noiselevel, self.noisephase, self.bitmapfilter)

    def __repr__( self ):
        return self.dump

#------------------------------------------------------------------------
#    CLASS MATERIALS SPECULARMAP
#------------------------------------------------------------------------
class cSpecularmap:
    def __init__( self, slot ):
        import os
        import bpy
        self.dump = ''

        if slot is None:
           self.name = 'default'
           self.mapclass = 'Bitmap'
           self.bitmap = 'None'
        else:
        # RS mod - Get texture images from slot nodes
           material = bpy.data.materials[slot.name]
           nodes = material.node_tree.nodes
           principled = next(n for n in nodes if n.type == 'BSDF_PRINCIPLED')
           specular_color = principled.inputs['Specular']
           if specular_color.is_linked:
               link = specular_color.links[0]
           else:
               removeDuplimeshes(list_objects)
               raise TypeError('Mesh must have a Material an image texture assigned')

           link_node = link.from_node

           if link_node.image is None:
               removeDuplimeshes(list_objects)
               raise TypeError(' Get one image texture from a file and assign it')

           self.name = link_node.image.name
           self.mapclass = 'Bitmap'
           self.bitmap = os.path.realpath(bpy.path.abspath(link_node.image.filepath))

        self.subno = 1
        self.amount = aseFloat(1.0)
        self.type = 'Screen'
        self.uoffset = aseFloat(0.0)
        self.voffset = aseFloat(0.0)
        self.utiling = aseFloat(1.0)
        self.vtiling = aseFloat(1.0)
        self.angle = aseFloat(0.0)
        self.blur = aseFloat(1.0)
        self.bluroffset = aseFloat(0.0)
        self.noiseamt = aseFloat(1.0)
        self.noisesize = aseFloat(1.0)
        self.noiselevel = 1
        self.noisephase = aseFloat(0.0)
        self.bitmapfilter = 'Pyramidal'

        self.dump = '''\n\t\t*MAP_SPECULAR {{\
                       \n\t\t\t*MAP_SPEC_NAME "{0}"\
                       \n\t\t\t*MAP_SPEC_CLASS "{1}"\
                       \n\t\t\t*MAP_SPEC_SUBNO {2}\
                       \n\t\t\t*MAP_SPEC_AMOUNT {3}\
                       \n\t\t\t*SPEC_BITMAP "{4}"\
                       \n\t\t\t*MAP_SPEC_TYPE {5}\
                       \n\t\t\t*UVW_SPEC_U_OFFSET {6}\
                       \n\t\t\t*UVW_SPEC_V_OFFSET {7}\
                       \n\t\t\t*UVW_SPEC_U_TILING {8}\
                       \n\t\t\t*UVW_SPEC_V_TILING {9}\
                       \n\t\t\t*UVW_SPEC_ANGLE {10}\
                       \n\t\t\t*UVW_SPEC_BLUR {11}\
                       \n\t\t\t*UVW_SPEC_BLUR_OFFSET {12}\
                       \n\t\t\t*UVW_SPEC_NOUSE_AMT {13}\
                       \n\t\t\t*UVW_SPEC_NOISE_SIZE {14}\
                       \n\t\t\t*UVW_SPEC_NOISE_LEVEL {15}\
                       \n\t\t\t*UVW_SPEC_NOISE_PHASE {16}\
                       \n\t\t\t*BITMAP_SPEC_FILTER {17}\
                       \n\t\t}}\
                       '''.format(self.name, self.mapclass, self.subno, self.amount, self.bitmap, self.type, self.uoffset, self.voffset, self.utiling, self.vtiling, self.angle, self.blur, self.bluroffset, self.noiseamt, self.noisesize, self.noiselevel, self.noisephase, self.bitmapfilter)

    def __repr__( self ):
        return self.dump

#=========================================================================
#    SMOOTHING GROUPS AND HELPER METHODS
#========================================================================= 
def defineSmoothing( self, object ):
    print( object.name + ": Constructing Smoothing Groups" )

    seam_edge_list = []
    sharp_edge_list = []

    _mode = bpy.context.active_object.mode
    bpy.ops.object.mode_set( mode = 'EDIT' )
    bpy.ops.mesh.select_all( action = 'DESELECT' )
    setSelMode( 'EDGE' )

    # Get seams and clear them
    bpy.ops.object.mode_set( mode = 'OBJECT' )
    for edge in object.data.edges:
        if edge.use_seam:
            seam_edge_list.append( edge.index )
            edge.select = True

    bpy.ops.object.mode_set( mode = 'EDIT' )
    bpy.ops.mesh.select_all( action = 'SELECT' )
    bpy.ops.mesh.mark_seam( clear = True )

    # Get sharp edges, convert them to seams
    bpy.ops.mesh.select_all( action = 'DESELECT' )
    bpy.ops.object.mode_set( mode = 'OBJECT' )
    for edge in object.data.edges:
        if edge.use_edge_sharp:
            sharp_edge_list.append( edge )
            edge.select = True

    bpy.ops.object.mode_set( mode = 'EDIT' )
    bpy.ops.mesh.mark_seam()

    bpy.ops.mesh.select_all( action = 'DESELECT' )

    smoothing_groups = []
    face_list = []

    mode = getSelMode( self, False )
    setSelMode( 'FACE' )

    for face in object.data.polygons:
        face_list.append( face.index )

    while len( face_list ) > 0:
        bpy.ops.object.mode_set( mode = 'OBJECT' )
        object.data.polygons[face_list[0]].select = True
        bpy.ops.object.mode_set( mode = 'EDIT' )
        bpy.ops.mesh.select_linked( delimit = {'SEAM'} )

        # TODO - update when API is updated
        selected_faces = getSelectedFaces( self, True )
        smoothing_groups.append( selected_faces )
        for face_index in selected_faces:
            if face_list.count( face_index ) > 0:
                face_list.remove( face_index )
        bpy.ops.mesh.select_all( action = 'DESELECT' )

    setSelMode( mode, False )

    # Clear seams created by sharp edges
    bpy.ops.object.mode_set( mode = 'OBJECT' )
    for edge in object.data.edges:
        if edge.use_seam:
            edge.select = True

    bpy.ops.object.mode_set( mode = 'EDIT' )
    bpy.ops.mesh.mark_seam( clear = True )

    bpy.ops.mesh.select_all( action = 'DESELECT' )
    # Restore original uv seams
    bpy.ops.object.mode_set( mode = 'OBJECT' )
    for edge_index in seam_edge_list:
        object.data.edges[edge_index].select = True

    bpy.ops.object.mode_set( mode = 'EDIT' )
    bpy.ops.mesh.mark_seam()

    print( '\t' + str( len( smoothing_groups ) ) + ' smoothing groups found.' )
    return smoothing_groups

#=================================================================================
#   Deletes duplicated selected meshes after ASE export writing or raise error.
#=================================================================================

def removeDuplimeshes(list_objects):
    # Change context to object mode
    bpy.ops.object.mode_set(mode='OBJECT')
    # Select objects by type and delete selected duplicate mesh objects
    objx = bpy.context.selected_objects
    for (i, o) in enumerate(objx):
        if ('UCX_Copy_', 'Copy' in o.name):  #o.type == 'MESH' and ('UCX_' in o.name):
            object_to_delete = bpy.data.objects[o.name]
            bpy.data.objects.remove(object_to_delete, do_unlink=True)
        #for o in bpy.context.selected_objects:
        #if o.type == 'MESH' and o.name not in list_objects:
            #object_to_delete = bpy.data.objects[o.name]
            #bpy.data.objects.remove(object_to_delete, do_unlink=True)

        print(list_objects)

#===========================================================================
# // General Helpers
#===========================================================================

# Check if the mesh is a collider
# Return True if collision model, else: false
def collisionObject( object ):
    collisionPrefixes = ['UCX_', 'UBX_', 'USX_', 'MCDCX_']
    for prefix in collisionPrefixes:
        if object.name.find( str( prefix ) ) >= 0:
            return True
    return False

# Set the selection mode    
def setSelMode( mode, default = True ):
    if default:
        if mode == 'VERT':
            bpy.context.tool_settings.mesh_select_mode = [True, False, False]
        elif mode == 'EDGE':
            bpy.context.tool_settings.mesh_select_mode = [False, True, False]
        elif mode == 'FACE':
            bpy.context.tool_settings.mesh_select_mode = [False, False, True]
        else:
            return False
    else:
        bpy.context.tool_settings.mesh_select_mode = mode
        return True
def getSelMode( self, default = True ):
    if default:
        if bpy.context.tool_settings.mesh_select_mode[0] == True:
            return 'VERT'
        elif bpy.context.tool_settings.mesh_select_mode[1] == True:
            return 'EDGE'
        elif bpy.context.tool_settings.mesh_select_mode[2] == True:
            return 'FACE'
        return False
    else:
        mode = []
        for value in bpy.context.tool_settings.mesh_select_mode:
            mode.append( value )

        return mode
def getSelectedFaces( self, index = False ):
    selected_faces = []
    # Update mesh data
    bpy.ops.object.editmode_toggle()
    bpy.ops.object.editmode_toggle()

    _mode = bpy.context.active_object.mode
    bpy.ops.object.mode_set( mode = 'EDIT' )

    object = bpy.context.active_object
    for face in object.data.polygons:
        if face.select == True:
            if index == False:
                selected_faces.append( face )
            else:
                selected_faces.append( face.index )

    bpy.ops.object.mode_set( mode = _mode )

    return selected_faces



#================================================================================================================================================
#
#    CORE
#
#================================================================================================================================================

from bpy_extras.io_utils import ExportHelper
from bpy.props import StringProperty, BoolProperty, FloatProperty

class ExportAse( bpy.types.Operator, ExportHelper ):
    '''Load an Ascii Scene Export File'''
    bl_idname = "export.ase"
    bl_label = "Export"
    __doc__ = "NR2003 PAS Exporter (.PAS)"
    filename_ext = ".PAS"
    filter_glob : StringProperty( default = "*.PAS", options = {'HIDDEN'} )

    filepath : StringProperty(
        name = "File Path",
        description = "File path used for exporting the PAS file",
        maxlen = 1024,
        default = "" )

    option_triangulate : BoolProperty(
            name = "Triangulate",
            description = "Triangulates all exportable objects",
            default = True )

    option_normals : BoolProperty(
            name = "Recalculate Normals",
            description = "Recalculate normals before exporting",
            default = True )

    option_remove_doubles : BoolProperty(
            name = "Remove Doubles",
            description = "Remove any duplicate vertices before exporting",
            default = True )

    option_apply_scale : BoolProperty(
            name = "Scale",
            description = "Apply scale transformation",
            default = True )

    option_apply_location : BoolProperty(
            name = "Location",
            description = "Apply location transformation",
            default = True )

    option_apply_rotation : BoolProperty(
            name = "Rotation",
            description = "Apply rotation transformation",
            default = True )

    option_smoothinggroups : BoolProperty(
            name = "Smoothing Groups",
            description = "Construct hard edge islands as smoothing groups",
            default = True )

    option_separate : BoolProperty(
            name = "Separate",
            description = "A separate PAS file for every selected object",
            default = False )

    option_submaterials : BoolProperty(
            name = "Use Submaterials (UDK)",
            description = "Export a single material with multiple sub materials",
            default = False )

    option_allowmultimats : BoolProperty(
            name = "Allow Multiple Materials (UDK)",
            description = "Allow multiple materials per geometry object",
            default = False )

    option_scale : FloatProperty(
            name = "Scale",
            description = "Object scaling factor (default: 1.0)",
            min = 0.01,
            max = 1000.0,
            soft_min = 0.01,
            soft_max = 1000.0,
            default = 16.0 )

    def draw( self, context ):
        layout = self.layout

        box = layout.box()
        box.label(text='Essentials:' )
        #box.prop( self, 'option_triangulate' )
        box.prop( self, 'option_normals' )
        box.prop( self, 'option_remove_doubles' )
        box.label( text="Transformations:" )
        box.prop( self, 'option_apply_scale' )
        box.prop( self, 'option_apply_rotation' )
        box.prop( self, 'option_apply_location' )
        #box.label( text="Materials:" )
        #box.prop( self, 'option_submaterials' )
        #box.prop( self, 'option_allowmultimats' )
        box.label( text="Advanced:" )
        box.prop( self, 'option_scale' )
        box.prop( self, 'option_smoothinggroups' )

    @classmethod
    def poll( cls, context ):
        active = context.active_object
        selected = context.selected_objects
        camera = context.scene.camera
        ok = selected or camera
        return ok

    def writeASE( self, filename, data ):
        print( '\nWriting', filename )
        try:
            file = open( filename, 'w' )
        except IOError:
            print( 'Error: The file could not be written to. Aborting.' )
        else:
            file.write( data )
            file.close()

    def execute( self, context ):
        #start = time.clock()

        global optionScale
        global optionSubmaterials
        global optionSmoothingGroups
        global optionAllowMultiMats

        global aseHeader
        global aseScene
        global aseMaterials
        global aseGeometry

        global currentMatId
        global numMats
        global matList
        global list_objects


        import bpy

        # Set globals and reinitialize ase components
        aseHeader = ''
        aseScene = ''
        aseMaterials = ''
        aseGeometry = ''

        optionScale = self.option_scale
        optionSubmaterials = self.option_submaterials
        optionSmoothingGroups = self.option_smoothinggroups
        optionAllowMultiMats = self.option_allowmultimats

        matList = []
        currentMatId = 0
        numMats = 0
        list_objects = []


        # Build PAS Header, Scene
        print( '\nAscii Scene Export by MCampagnini\n' )
        print( 'Objects selected: ' + str( len( bpy.context.selected_objects ) ) )
        aseHeader = str( cHeader() )
#        asePoopy = str( cPoopy() )
        #aseScene = str( cScene() )
        aseMaterials = str( cMaterials() )

        # Make a list of selected objects
        for obj in bpy.context.selected_objects:
            if obj not in list_objects:
                list_objects.append(obj.name)

        # Duplicate selected meshes
        selected_objects = [o for o in bpy.context.scene.objects if o.select_get()]
        bpy.ops.object.duplicate()
        objx = bpy.context.selected_objects
        # Rename duplicated objects
        for (i, o) in enumerate(objx):
            if ('UCX_' in o.name):
                o.name = "UCX_Copy" + o.name.format(i) # 'UCX_Co#pia_{:03d}'.format(i)   # rename duplicated noncollision objects
            else:
                o.name = ""+ obj.name#.format(i) #'Co#pia_{:03d}'.format(i)  # rename duplicated mesh objects



        # Apply applicable options
        for object in bpy.context.selected_objects:
            if object.type == 'MESH':
                bpy.context.view_layer.objects.active = object
                bpy.context.active_object.select_set(state=True)

                # Options
                bpy.ops.object.mode_set( mode = 'EDIT' )
                if self.option_remove_doubles:
                    bpy.ops.object.mode_set( mode = 'EDIT' )
                    bpy.ops.mesh.select_all( action = 'SELECT' )
                    bpy.ops.mesh.remove_doubles()
                if self.option_triangulate:
                    print( object.name + ': Converting to triangles' )
                    bpy.ops.mesh.select_all( action = 'SELECT' )
                    bpy.ops.mesh.quads_convert_to_tris()
                if self.option_normals:
                    print( object.name + ': Recalculating normals' )
                    bpy.ops.object.mode_set( mode = 'EDIT' )
                    bpy.ops.mesh.select_all( action = 'SELECT' )
                    bpy.ops.mesh.normals_make_consistent()

                # Transformations
                bpy.ops.object.mode_set( mode = 'OBJECT' )
                bpy.ops.object.transform_apply( location = self.option_apply_location, rotation = self.option_apply_rotation, scale = self.option_apply_scale )

                #Construct PAS Geometry Nodes
                aseGeometry += str( cGeomObject( object ) )

            else:
                continue

        aseModel = ''
        aseModel += aseHeader
#        aseModel += asePoopy
        #aseModel += aseScene
        aseModel += aseGeometry
        aseModel += aseMaterials

        # Write the PAS file
        self.writeASE( self.filepath, aseModel )

        #lapse = ( time.clock() - start )
        #print( 'Completed in ' + str( lapse ) + ' seconds' )

        # Select objects by type and delete selected duplicate mesh objects
        removeDuplimeshes (list_objects)


        return {'FINISHED'}

def menu_func( self, context ):
    self.layout.operator( ExportAse.bl_idname, text = "NR2003 PAS Exporter (.PAS)" )
#================================================================================================================================================
#
#    Registration
#
#================================================================================================================================================

classes = [
        ExportAse
    ]  

  
def register():
    for cls in classes:
        bpy.utils.register_class(cls)
        
 
def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)
    
if __name__=="__main__":
    register()
    
    # test call
    bpy.ops.export.ase('INVOKE_DEFAULT')
